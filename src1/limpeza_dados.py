import pandas as pd
import os
from pathlib import Path

def formatar_numero(numero):
    if pd.isna(numero):
        return numero
    numero = str(numero).strip().replace(" ", "").replace("+", "").replace("*", "").replace("'", "").replace('"', '')
    if numero.startswith("9") and len(numero) == 9:
        return f"+351{numero}"
    elif numero.startswith("351") and len(numero) >= 11:
        return f"+{numero}"
    elif len(numero) < 9:
        return f"{numero}***"
    return f"+{numero}" if numero.isdigit() else numero

def clean_data(data_inicio=None, data_fim=None):
    print("üöÄ Iniciando limpeza de dados...")

    arquivo_csv = "../output/clean_data.csv"
    if not Path(arquivo_csv).exists():
        print(f"‚ùå Arquivo n√£o encontrado: {arquivo_csv}")
        return

    try:
        df = pd.read_csv(arquivo_csv, delimiter=";")
        print(f"üì• CSV carregado com {len(df)} linhas.")
        print("üìã Colunas encontradas:", df.columns.tolist())

    except Exception as e:
        print(f"‚ùå Erro ao ler o CSV: {e}")
        return

    df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"], errors="coerce")
    initial_count = len(df)
    df = df.dropna(subset=["Data de In√≠cio"])
    if len(df) < initial_count:
        print(f"‚è∞ Removidas {initial_count - len(df)} linhas com datas inv√°lidas")

    if data_inicio is not None:
        data_inicio = pd.to_datetime(data_inicio)
        df = df[df["Data de In√≠cio"] >= data_inicio]
    if data_fim is not None:
        data_fim = pd.to_datetime(data_fim)
        df = df[df["Data de In√≠cio"] <= data_fim]

    df = df.reset_index(drop=True)

    required_columns = ["Servi√ßo", "Tipo de Encaminhamento"]
    missing_cols = [col for col in required_columns if col not in df.columns]
    if missing_cols:
        raise ValueError(f"‚ùå Colunas ausentes: {missing_cols}")

    df = df[df["Servi√ßo"].str.strip().str.lower() == "chamada voz"]
    print(f"üìû Ap√≥s filtro 'chamada voz': {len(df)} linhas")

    #df = df[df["Tipo de Encaminhamento"].isna() | (df["Tipo de Encaminhamento"].str.strip() == "")]
    #df = df.reset_index(drop=True)
    #print(f"üßπ Ap√≥s filtro 'Tipo de Encaminhamento' vazio: {len(df)} linhas")

    df["Origem"] = df["Origem"].astype(str).str.strip().str.replace(r"[^0-9]", "", regex=True)
    df["Destino Final"] = df["Destino Final"].astype(str).str.strip().str.replace(r"[^0-9]", "", regex=True)
    print(df["Destino Final"].head(10))

    destinos_desejados = ["962878547", "962878568"]
    df = df[df["Destino Final"].isin(destinos_desejados)]
    print(f"üìå Ap√≥s filtro por 'Destino Final' desejado: {len(df)} linhas")

    df = df[~df["Origem"].astype(str).str.startswith('4')]
    df = df[~df["Destino Final"].astype(str).str.startswith('4')]
    df = df[~df["Origem"].astype(str).str.startswith("35193599")]
    df = df[~df["Origem"].astype(str).str.startswith("35191244")]

    df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"], errors="coerce")
    df = df.dropna(subset=["Data de In√≠cio"])
    df = df.sort_values(by="Data de In√≠cio")
    print(f"üî¢ Dados ordenados por data. Primeira data: {df['Data de In√≠cio'].iloc[0]}, √öltima data: {df['Data de In√≠cio'].iloc[-1]}")

    to_remove_indices = []
    duplicate_pairs_found = 0

    for i in range(1, len(df)):
        current_time = df.iloc[i]["Data de In√≠cio"]
        previous_time = df.iloc[i-1]["Data de In√≠cio"]
        if current_time == previous_time:
            tipo_anterior = str(df.iloc[i-1]["Tipo"]).strip()
            tipo_atual = str(df.iloc[i]["Tipo"]).strip()
            if (("Chamada efetuada" in tipo_anterior and "Chamada N√£o Atendida" in tipo_atual) or
                ("Chamada efetuada" in tipo_atual and "Chamada N√£o Atendida" in tipo_anterior)):
                duplicate_pairs_found += 1
                if "Chamada N√£o Atendida" in tipo_anterior:
                    causa = df.iloc[i-1]["Causa de N√£o Atendimento"]
                    df.at[df.index[i], "Causa de N√£o Atendimento"] = causa
                    to_remove_indices.append(df.index[i-1])
                else:
                    causa = df.iloc[i]["Causa de N√£o Atendimento"]
                    df.at[df.index[i-1], "Causa de N√£o Atendimento"] = causa
                    to_remove_indices.append(df.index[i])

    if to_remove_indices:
        print(f"\nüóëÔ∏è Removendo {len(to_remove_indices)} linhas de 'Chamada N√£o Atendida'")
        df = df.drop(index=to_remove_indices)
    else:
        print("\n‚ÑπÔ∏è Nenhuma duplicata para remover")

    print("\nüîç Ap√≥s o processamento de duplicatas:")
    print(df[["Data de In√≠cio", "Tipo de Encaminhamento", "Causa de N√£o Atendimento"]].head())

    cols_to_drop = [
        "Fuso Hor√°rio", "N√∫mero de P√°ginas do Fax", "Tempo da Fila de Espera",
        "Tipo de Encaminhamento", "Percurso no Grupo de Atendimento",
        "Identifica√ß√£o de chamada reencaminhada", "Contexto de Acesso da Chamada", "Tipo de Telefone", "Tipo de localiza√ß√£o", "Utilizador", "Pa√≠s", "Identificador Global da Chamada", "Servi√ßo"
    ]
    df = df.drop(columns=[col for col in cols_to_drop if col in df.columns], errors="ignore")

    colunas_para_formatar = ['Origem', 'Destino', 'Destino Final']
    for col in colunas_para_formatar:
        if col in df.columns:
            df[col] = df[col].apply(formatar_numero)
        else:
            print(f"‚ö†Ô∏è Coluna '{col}' n√£o encontrada no DataFrame.")

    print(df[['Origem', 'Destino', 'Destino Final']].head(10))

    df = df.sort_values(by="Data de In√≠cio", ascending=False).reset_index(drop=True)

    output_dir = "../output"
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "clean_data.csv")
    df.to_csv(output_file, index=False, sep=";")
    print(f"\n‚úÖ Dados limpos salvos em: {output_file}")
    print(f"üìä Total final de registros: {len(df)}")

if __name__ == "__main__":
    clean_data()
