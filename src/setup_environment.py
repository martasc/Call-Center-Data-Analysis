from datetime import timedelta
import os
import glob
import shutil
from pathlib import Path
import pandas as pd

DADOS_COMPLETOS = "../input/junho.csv"
OUTPUT_FOLDER = "../output"
OUTPUT_FILE = os.path.join(OUTPUT_FOLDER, "clean_data.csv")

def remove_output_files(output_folder=OUTPUT_FOLDER):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
        print(f"üìÅ Diret√≥rio criado: {output_folder}")
    else:
        files = glob.glob(os.path.join(output_folder, "*"))
        for f in files:
            try:
                os.remove(f)
            except IsADirectoryError:
                shutil.rmtree(f)
        print(f"üßº Diret√≥rio limpo: {output_folder}")

def remover_nao_atendidas_apos_chamada_recebida(df):
    df = df.copy()
    df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"], errors="coerce")

    def normalize(n):
        if pd.isna(n): return ""
        return str(n).strip().replace("'", "").replace(" ", "").removeprefix("+351").removeprefix("351")

    df["Origem_norm"] = df["Origem"].apply(normalize)
    df["Destino_norm"] = df["Destino"].apply(normalize)

    chamadas_nao_atendidas = df[df["Tipo"] == "Chamada N√£o Atendida"]
    chamadas_efetuadas = df[df["Tipo"] == "Chamada efetuada"]

    indices_para_remover = set()

    for idx, row_na in chamadas_nao_atendidas.iterrows():
        origem_na = row_na["Origem_norm"]
        data_na = row_na["Data de In√≠cio"]

        # Procurar chamadas efetuadas anteriores com destino igual √† origem da NA
        houve_chamada_para_essa_origem = chamadas_efetuadas[
            (chamadas_efetuadas["Destino_norm"] == origem_na) &
            (chamadas_efetuadas["Data de In√≠cio"] < data_na)
        ]

        if not houve_chamada_para_essa_origem.empty:
            indices_para_remover.add(idx)

    return df.drop(index=indices_para_remover).reset_index(drop=True)

def contar_chamadas(grupo):
    grupo = grupo.sort_values('Data de In√≠cio', ascending=False).reset_index(drop=True)
    grupo['Total Chamadas'] = pd.NA
    usados = set()

    for idx in grupo.index:
        if idx in usados:
            continue

        tipo = grupo.loc[idx, 'Tipo']

        if tipo == "Chamada recebida":
            # Chamada atendida ‚Üí n√£o agrupa ningu√©m, conta sozinha
            grupo.loc[idx, 'Total Chamadas'] = 1
            usados.add(idx)
            continue

        t = grupo.loc[idx, 'Data de In√≠cio']
        # Define a janela de 1 hora anterior
        janela = grupo[
            (grupo['Data de In√≠cio'] <= t) & 
            (grupo['Data de In√≠cio'] >= t - timedelta(hours=1))
        ]
        janela = janela[~janela.index.isin(usados)]

        # Exclui chamadas atendidas da janela
        janela = janela[grupo.loc[janela.index, 'Tipo'] != "Chamada recebida"]

        if len(janela) == 1:
            grupo.loc[idx, 'Total Chamadas'] = 1
            usados.add(idx)
        elif len(janela) > 1:
            grupo.loc[janela.index[0], 'Total Chamadas'] = len(janela)
            usados.update(janela.index)

    return grupo

def filtrar_devolu√ß√µes(df_filtrada, output_folder=OUTPUT_FOLDER):
    """Filtra e exporta apenas as primeiras chamadas efetuadas v√°lidas como devolu√ß√£o a cada chamada n√£o atendida."""

    df = df_filtrada.copy()
    df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"], errors='coerce')

    # Normalize numbers
    def normalize(n):
        if pd.isna(n): return ""
        return str(n).strip().replace("'", "").replace(" ", "").removeprefix("+351").removeprefix("351")

    df["Origem_norm"] = df["Origem"].apply(normalize)
    df["Destino_norm"] = df["Destino"].apply(normalize)

    chamadas_na = df[df["Tipo"] == "Chamada N√£o Atendida"]
    chamadas_eff = df[df["Tipo"] == "Chamada efetuada"]

    devolucoes = []

    for _, row_na in chamadas_na.iterrows():
        origem = row_na["Origem_norm"]
        destino = row_na["Destino_norm"]
        data_na = row_na["Data de In√≠cio"]

        candidatos = chamadas_eff[
            (chamadas_eff["Origem_norm"] == destino) &
            (chamadas_eff["Destino_norm"] == origem) &
            (chamadas_eff["Data de In√≠cio"] > data_na)
        ].sort_values("Data de In√≠cio")

        if not candidatos.empty:
            first_return = candidatos.iloc[0].copy()
            first_return["Data Chamada N√£o Atendida"] = data_na
            devolucoes.append(first_return)

    df_retornos = pd.DataFrame(devolucoes)

    # ‚úÖ Only keep 'Chamada efetuada' rows in output
    df_retornos = df_retornos[df_retornos["Tipo"] == "Chamada efetuada"]

    output_path = os.path.join(output_folder, "chamadas_efetuadas.csv")
    df_retornos.to_csv(output_path, index=False, sep=";")
    print(f"üìÑ Ficheiro de chamadas efetuadas (devolu√ß√µes) guardado em: {output_path}")

    return df_retornos


def copy_input_to_output(dados_completos=DADOS_COMPLETOS, output_file=OUTPUT_FILE):
    if not Path(dados_completos).exists():
        print(f"‚ùå Arquivo de input n√£o encontrado: {dados_completos}")
        return

    try:
        df_completa = pd.read_csv(dados_completos, delimiter=";", skiprows=2)
        df_filtrada = pd.read_csv(dados_completos, delimiter=";", skiprows=2, header=0)

        print(df_filtrada.head(20))
        output_path = os.path.join(OUTPUT_FOLDER, "teste.csv")
        df_filtrada.to_csv(output_path, index=False, sep=";")

        # ‚ùó Remove inbound replies to our outbound calls
        df_filtrada = remover_nao_atendidas_apos_chamada_recebida(df_filtrada)

        tipos_desejados = ["Chamada recebida", "Chamada N√£o Atendida"]
        df_filtrado = df_filtrada[df_filtrada["Tipo"].isin(tipos_desejados)]

        df_final = df_filtrado.drop_duplicates(subset="Identificador Global da Chamada", keep="first").reset_index(drop=True)

        required_cols = ['Origem', 'Data de In√≠cio', 'Tipo']
        missing_cols = [col for col in required_cols if col not in df_filtrada.columns]
        if missing_cols:
            print(f"‚ö†Ô∏è Aviso: Colunas obrigat√≥rias ausentes ap√≥s leitura: {missing_cols}")

       


        colunas_a_remover = [
            "Utilizador",
            "Telefone de Origem",
            "N√∫mero de P√°ginas do Fax",
            "Tipo de Telefone",
            "Contexto de Acesso da Chamada",
            "Tipo de localiza√ß√£o",
            "Servi√ßo",
            "Tempo da Fila de Espera",
            "Pa√≠s",
            "Identifica√ß√£o de chamada reencaminhada",
            "Percurso no Grupo de Atendimento",
            "Tipo de Encaminhamento"
        ]

        df_final = df_final.drop(columns=[col for col in colunas_a_remover if col in df_final.columns])

        # Garantir formato datetime
        df_final['Data de In√≠cio'] = pd.to_datetime(df_final['Data de In√≠cio'], errors='coerce')

        # Fun√ß√£o corrigida para contagem por janela de 1 hora por n√∫mero de origem
      
        ###Filtro de numeros chamadas testes
        # Remove espa√ßos em branco e aspas extras da coluna "Origem"
        df_final['Origem'] = df_final['Origem'].str.strip().str.replace("'", "", regex=False)

        valores_remover = ['An√≥nimo', '+351938116613', '+351915942292', '+351935991897']
        telf_paradela = ['+351234246184']

        # Remove espa√ßos e aspas extras antes de comparar
        df_final['Destino'] = df_final['Destino'].str.strip().str.replace("'", "")

        # Remove as linhas de nrs filtrados
        df_final = df_final[~df_final['Origem'].isin(valores_remover)]
        df_final = df_final[~df_final['Destino'].isin(telf_paradela)]

        # Garante que 'Data de In√≠cio' est√° em datetime
        df_final['Data de In√≠cio'] = pd.to_datetime(df_final['Data de In√≠cio'])

        # Aplica por n√∫mero de origem
        df_final = df_final.groupby('Origem', group_keys=False).apply(contar_chamadas)

  
        df_final['Total Chamadas'] = pd.to_numeric(df_final['Total Chamadas'], errors='coerce').astype('Int64')

        df_final = df_final.sort_values('Data de In√≠cio', ascending=False).reset_index(drop=True)

        # Exporta o resultado
        output_path = os.path.join(OUTPUT_FOLDER, "chamadas_efetuadas.csv")
        df_filtrada.to_csv(output_path, index=False, sep=";")


        df_final.to_csv(output_file, index=False, sep=";")
        print(f"üìÑ Ficheiro processado e copiado: {dados_completos} ‚û°Ô∏è {output_file}")

        devolucoes = filtrar_devolu√ß√µes(df_filtrada, OUTPUT_FOLDER)

        df_combined = pd.concat([df_final, devolucoes], ignore_index=True)
        df_combined["Data de In√≠cio"] = pd.to_datetime(df_combined["Data de In√≠cio"], errors='coerce')

        # Ordenar do mais recente para o mais antigo
        df_combined = df_combined.sort_values("Data de In√≠cio", ascending=False)
        combined_output_path = os.path.join(OUTPUT_FOLDER, "combined_results.csv")
        df_combined.to_csv(combined_output_path, index=False, sep=";")
        print(f"üìÑ Ficheiro combinado guardado em: {combined_output_path}")

    except Exception as e:
        print(f"‚ùå Erro ao processar o ficheiro de input: {e}")

def setup_cleaning_environment():
    print("üßπ Preparando ambiente de limpeza...")
    remove_output_files()
    copy_input_to_output()
    print("\nüîç Verificando arquivos gerados...")
    
    # Verifica os arquivos criados
    for fname in ["clean_data.csv", "chamadas_efetuadas.csv"]:
        path = os.path.join(OUTPUT_FOLDER, fname)
        if os.path.exists(path):
            df = pd.read_csv(path, sep=";")
            print(f"  {fname}: {len(df)} registros (Tipos: {df['Tipo'].unique()})")
        else:
            print(f"  ‚ö†Ô∏è {fname} n√£o encontrado")
    
    # Processa a combina√ß√£o
    print("\nüîÑ Combinando arquivos...")
    copy_input_to_output()
    print("‚úÖ Ambiente pronto.")